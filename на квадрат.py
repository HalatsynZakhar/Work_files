#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from pathlib import Path
from PIL import Image, ImageOps
import argparse


def make_image_square(image_path, background_color=(255, 255, 255)):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ, –¥–æ–±–∞–≤–ª—è—è —Ñ–æ–Ω –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

    Args:
        image_path (Path): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        background_color (tuple): –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (R, G, B)

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(image_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
            if img.mode in ('RGBA', 'LA', 'P'):
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                rgb_img = Image.new('RGB', img.size, background_color)
                if img.mode == 'P':
                    img = img.convert('RGBA')
                rgb_img.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
                img = rgb_img
            elif img.mode != 'RGB':
                img = img.convert('RGB')

            width, height = img.size

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º
            if width == height:
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: '{image_path.name}' (—É–∂–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ {width}x{height})")
                return True

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞ (–ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)
            square_size = max(width, height)

            # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ö–æ–ª—Å—Ç —Å —Ñ–æ–Ω–æ–º
            square_img = Image.new('RGB', (square_size, square_size), background_color)

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            x_offset = (square_size - width) // 2
            y_offset = (square_size - height) // 2

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ö–æ–ª—Å—Ç–∞
            square_img.paste(img, (x_offset, y_offset))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º (–∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª)
            square_img.save(image_path, quality=95, optimize=True)

            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: '{image_path.name}' ({width}x{height} -> {square_size}x{square_size})")
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{image_path.name}': {e}")
        return False


def process_images_in_directory(directory_path, recursive=False, background_color=(255, 255, 255)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    Args:
        directory_path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        recursive (bool): –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        background_color (tuple): –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (R, G, B)

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        path = Path(directory_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not path.exists():
            print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{directory_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        if not path.is_dir():
            print(f"‚ùå –û—à–∏–±–∫–∞: '{directory_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
            return False

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp'}

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if recursive:
            image_files = [f for f in path.rglob('*') if f.is_file() and f.suffix.lower() in image_extensions]
        else:
            image_files = [f for f in path.iterdir() if f.is_file() and f.suffix.lower() in image_extensions]

        if not image_files:
            print(f"üìÅ –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return True

        processed_count = 0
        skipped_count = 0
        error_count = 0

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print("=" * 70)

        for image_file in image_files:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                if recursive:
                    relative_path = image_file.relative_to(path)
                    print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {relative_path}")

                result = make_image_square(image_file, background_color)

                if result:
                    if "–ü—Ä–æ–ø—É—â–µ–Ω" in str(result):
                        skipped_count += 1
                    else:
                        processed_count += 1
                else:
                    error_count += 1

            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å '{image_file.name}': {e}")
                error_count += 1

        print("=" * 70)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ): {skipped_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"   –û—à–∏–±–æ–∫: {error_count}")

        return True

    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def process_single_image(image_path, background_color=(255, 255, 255)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    Args:
        image_path (str): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        background_color (tuple): –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (R, G, B)

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    path = Path(image_path)

    if not path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{image_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False

    if not path.is_file():
        print(f"‚ùå –û—à–∏–±–∫–∞: '{image_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp'}
    if path.suffix.lower() not in image_extensions:
        print(f"‚ùå –û—à–∏–±–∫–∞: '{image_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return False

    print(f"üñºÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {path.name}")
    print("=" * 50)

    result = make_image_square(path, background_color)

    if result:
        print("‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")

    return result


def parse_color(color_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ü–≤–µ—Ç–∞ –≤ –∫–æ—Ä—Ç–µ–∂ RGB

    Args:
        color_str (str): –¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "255,255,255" –∏–ª–∏ "white"

    Returns:
        tuple: (R, G, B)
    """
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
    colors = {
        'white': (255, 255, 255),
        'black': (0, 0, 0),
        'red': (255, 0, 0),
        'green': (0, 255, 0),
        'blue': (0, 0, 255),
        'gray': (128, 128, 128),
        'grey': (128, 128, 128),
    }

    color_str = color_str.lower().strip()

    if color_str in colors:
        return colors[color_str]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ RGB –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        rgb_parts = [int(x.strip()) for x in color_str.split(',')]
        if len(rgb_parts) == 3 and all(0 <= x <= 255 for x in rgb_parts):
            return tuple(rgb_parts)
    except ValueError:
        pass

    print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ '{color_str}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–ª—ã–π —Ü–≤–µ—Ç")
    return (255, 255, 255)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description="–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
        epilog="–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
               "  python script.py -d /path/to/images\n"
               "  python script.py -f image.jpg\n"
               "  python script.py -d /path/to/images -r --color black\n"
               "  python script.py -f image.png --color 128,128,128",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-d', '--directory', help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')
    group.add_argument('-f', '--file', help='–ü—É—Ç—å –∫ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')

    parser.add_argument('-r', '--recursive', action='store_true',
                        help='–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è -d)')
    parser.add_argument('--color', default='white',
                        help='–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (white, black, red, green, blue, gray –∏–ª–∏ R,G,B). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: white')

    args = parser.parse_args()

    # –ü–∞—Ä—Å–∏–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
    background_color = parse_color(args.color)

    print("üñºÔ∏è  –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    print(f"üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞: RGB{background_color}")
    print()

    if args.file:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
        success = process_single_image(args.file, background_color)
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {args.directory}")
        if args.recursive:
            print("üîÑ –†–µ–∂–∏–º: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        print()

        success = process_images_in_directory(args.directory, args.recursive, background_color)

    if success:
        print("\n‚ú® –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\nüí• –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) == 1:
        print("üñºÔ∏è  –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        print()
        print("üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")

        # ========================================
        # –ù–ê–°–¢–†–û–ô–ö–ê: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –ø—É—Ç—å –∫ –≤–∞—à–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        # ========================================
        directory_path = r"\\10.10.100.2\FotoPack"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å
        recursive_mode = True  # True –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        background_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω

        print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory_path}")
        print(f"   –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ: {recursive_mode}")
        print(f"   –¶–≤–µ—Ç —Ñ–æ–Ω–∞: RGB{background_color}")
        print()

        success = process_images_in_directory(directory_path, recursive_mode, background_color)

        if success:
            print("\n‚ú® –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            print("\nüí• –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        main()